// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShipBu.Data;

#nullable disable

namespace ShipBu.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ShipBu.Data.Academy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Video")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Academies");
                });

            modelBuilder.Entity("ShipBu.Data.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("ShipBu.Data.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("InvoiceAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ShipBu.Data.BoxProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<float>("Length")
                        .HasColumnType("real");

                    b.Property<int>("ProductCount")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.Property<float>("Width")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BoxProducts");
                });

            modelBuilder.Entity("ShipBu.Data.CalculationVariable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("PrivateAdressPrice")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<float?>("Variable")
                        .IsRequired()
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("CalculationVariables");
                });

            modelBuilder.Entity("ShipBu.Data.ContainerGenre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ContainerGenres");
                });

            modelBuilder.Entity("ShipBu.Data.ContainerProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContainerGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<float>("Ton")
                        .HasColumnType("real");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ContainerGenreId");

                    b.HasIndex("UserId");

                    b.ToTable("ContainerProducts");
                });

            modelBuilder.Entity("ShipBu.Data.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("ShipBu.Data.Locationinfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BoxProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommunicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ContainerProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PaletteProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductFeatureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SendingCountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TelephoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WareHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BoxProductId");

                    b.HasIndex("ContainerProductId");

                    b.HasIndex("CountryId");

                    b.HasIndex("PaletteProductId");

                    b.HasIndex("ProductFeatureId");

                    b.HasIndex("SendingCountryId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.HasIndex("WareHouseId");

                    b.ToTable("Locationinfos");
                });

            modelBuilder.Entity("ShipBu.Data.Packageprocess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Feature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCheckedPdf")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCheckedWare")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Packageprocesses");
                });

            modelBuilder.Entity("ShipBu.Data.PaletteProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<float>("Length")
                        .HasColumnType("real");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.Property<float>("Width")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PaletteProducts");
                });

            modelBuilder.Entity("ShipBu.Data.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CalculationVariableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocationInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PriceEditId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductFeatureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SendingGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CalculationVariableId");

                    b.HasIndex("LocationInfoId");

                    b.HasIndex("PriceEditId");

                    b.HasIndex("ProductFeatureId");

                    b.HasIndex("SendingGenreId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("ShipBu.Data.PriceEdit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PrimaryKG")
                        .HasColumnType("int");

                    b.Property<int>("SecondaryKg")
                        .HasColumnType("int");

                    b.Property<Guid?>("SendingGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WareHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("SendingGenreId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.HasIndex("WareHouseId");

                    b.ToTable("PriceEdits");
                });

            modelBuilder.Entity("ShipBu.Data.ProductFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BoxProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContainerProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCheckedWareHouse")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PackageprocessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PaletteProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Pdf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BoxProductId");

                    b.HasIndex("ContainerProductId");

                    b.HasIndex("PackageprocessId");

                    b.HasIndex("PaletteProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductFeatures");
                });

            modelBuilder.Entity("ShipBu.Data.SendingCountry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreaterUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreaterUserId");

                    b.ToTable("SendingCountries");
                });

            modelBuilder.Entity("ShipBu.Data.SendingGenre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryTıme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SendingGenres");
                });

            modelBuilder.Entity("ShipBu.Data.Shipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Buyer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RecipientCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestStatu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipmentNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingStatu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("ShipBu.Data.State", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("ShipBu.Data.WareHouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.ToTable("WareHouses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ShipBu.Data.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ShipBu.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ShipBu.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ShipBu.Data.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShipBu.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ShipBu.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShipBu.Data.Academy", b =>
                {
                    b.HasOne("ShipBu.Data.AppUser", "CreaterUser")
                        .WithMany("Academies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreaterUser");
                });

            modelBuilder.Entity("ShipBu.Data.BoxProduct", b =>
                {
                    b.HasOne("ShipBu.Data.AppUser", "CreaterUser")
                        .WithMany("BoxProducts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreaterUser");
                });

            modelBuilder.Entity("ShipBu.Data.ContainerGenre", b =>
                {
                    b.HasOne("ShipBu.Data.AppUser", "CreaterUser")
                        .WithMany("ContainerGenres")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreaterUser");
                });

            modelBuilder.Entity("ShipBu.Data.ContainerProduct", b =>
                {
                    b.HasOne("ShipBu.Data.ContainerGenre", "ContainerGenre")
                        .WithMany("ContainerProducts")
                        .HasForeignKey("ContainerGenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ShipBu.Data.AppUser", "CreaterUser")
                        .WithMany("ContainerProducts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ContainerGenre");

                    b.Navigation("CreaterUser");
                });

            modelBuilder.Entity("ShipBu.Data.Country", b =>
                {
                    b.HasOne("ShipBu.Data.AppUser", "CreaterUser")
                        .WithMany("Countries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreaterUser");
                });

            modelBuilder.Entity("ShipBu.Data.Locationinfo", b =>
                {
                    b.HasOne("ShipBu.Data.BoxProduct", "BoxProduct")
                        .WithMany("Locationinfos")
                        .HasForeignKey("BoxProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ShipBu.Data.ContainerProduct", "ContainerProduct")
                        .WithMany("Locationinfos")
                        .HasForeignKey("ContainerProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ShipBu.Data.Country", "Country")
                        .WithMany("Locationinfos")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ShipBu.Data.PaletteProduct", "PaletteProduct")
                        .WithMany("Locationinfos")
                        .HasForeignKey("PaletteProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ShipBu.Data.ProductFeature", "ProductFeature")
                        .WithMany("Locationinfos")
                        .HasForeignKey("ProductFeatureId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ShipBu.Data.SendingCountry", "SendingCountry")
                        .WithMany("Locationinfos")
                        .HasForeignKey("SendingCountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ShipBu.Data.State", "state")
                        .WithMany("Locationinfos")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ShipBu.Data.AppUser", "CreaterUser")
                        .WithMany("Locationinfos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ShipBu.Data.WareHouse", "WareHouse")
                        .WithMany("Locationinfos")
                        .HasForeignKey("WareHouseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BoxProduct");

                    b.Navigation("ContainerProduct");

                    b.Navigation("Country");

                    b.Navigation("CreaterUser");

                    b.Navigation("PaletteProduct");

                    b.Navigation("ProductFeature");

                    b.Navigation("SendingCountry");

                    b.Navigation("WareHouse");

                    b.Navigation("state");
                });

            modelBuilder.Entity("ShipBu.Data.Packageprocess", b =>
                {
                    b.HasOne("ShipBu.Data.AppUser", "CreaterUser")
                        .WithMany("Packageprocesses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreaterUser");
                });

            modelBuilder.Entity("ShipBu.Data.PaletteProduct", b =>
                {
                    b.HasOne("ShipBu.Data.AppUser", "CreaterUser")
                        .WithMany("PaletteProducts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreaterUser");
                });

            modelBuilder.Entity("ShipBu.Data.Payment", b =>
                {
                    b.HasOne("ShipBu.Data.CalculationVariable", "CalculationVariable")
                        .WithMany("Payments")
                        .HasForeignKey("CalculationVariableId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ShipBu.Data.Locationinfo", "locationInfo")
                        .WithMany("Payments")
                        .HasForeignKey("LocationInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ShipBu.Data.PriceEdit", "PriceEdit")
                        .WithMany("Payments")
                        .HasForeignKey("PriceEditId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ShipBu.Data.ProductFeature", "ProductFeature")
                        .WithMany()
                        .HasForeignKey("ProductFeatureId");

                    b.HasOne("ShipBu.Data.SendingGenre", "SendingGenre")
                        .WithMany("Payments")
                        .HasForeignKey("SendingGenreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ShipBu.Data.AppUser", "CreaterUser")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CalculationVariable");

                    b.Navigation("CreaterUser");

                    b.Navigation("PriceEdit");

                    b.Navigation("ProductFeature");

                    b.Navigation("SendingGenre");

                    b.Navigation("locationInfo");
                });

            modelBuilder.Entity("ShipBu.Data.PriceEdit", b =>
                {
                    b.HasOne("ShipBu.Data.Country", "Country")
                        .WithMany("PriceEdits")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ShipBu.Data.SendingGenre", "SendingGenre")
                        .WithMany("PriceEdits")
                        .HasForeignKey("SendingGenreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ShipBu.Data.State", "State")
                        .WithMany("PriceEdits")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ShipBu.Data.AppUser", "CreaterUser")
                        .WithMany("PriceEdits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ShipBu.Data.WareHouse", "WareHouse")
                        .WithMany("PriceEdits")
                        .HasForeignKey("WareHouseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Country");

                    b.Navigation("CreaterUser");

                    b.Navigation("SendingGenre");

                    b.Navigation("State");

                    b.Navigation("WareHouse");
                });

            modelBuilder.Entity("ShipBu.Data.ProductFeature", b =>
                {
                    b.HasOne("ShipBu.Data.BoxProduct", "BoxProduct")
                        .WithMany("ProductFeatures")
                        .HasForeignKey("BoxProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ShipBu.Data.ContainerProduct", "ContainerProduct")
                        .WithMany("ProductFeatures")
                        .HasForeignKey("ContainerProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ShipBu.Data.Packageprocess", "Packageprocess")
                        .WithMany("ProductFeatures")
                        .HasForeignKey("PackageprocessId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ShipBu.Data.PaletteProduct", "PaletteProduct")
                        .WithMany("ProductFeatures")
                        .HasForeignKey("PaletteProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ShipBu.Data.AppUser", "CreaterUser")
                        .WithMany("ProductFeatures")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BoxProduct");

                    b.Navigation("ContainerProduct");

                    b.Navigation("CreaterUser");

                    b.Navigation("Packageprocess");

                    b.Navigation("PaletteProduct");
                });

            modelBuilder.Entity("ShipBu.Data.SendingCountry", b =>
                {
                    b.HasOne("ShipBu.Data.AppUser", "CreaterUser")
                        .WithMany()
                        .HasForeignKey("CreaterUserId");

                    b.Navigation("CreaterUser");
                });

            modelBuilder.Entity("ShipBu.Data.SendingGenre", b =>
                {
                    b.HasOne("ShipBu.Data.AppUser", "CreaterUser")
                        .WithMany("SendingGenres")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreaterUser");
                });

            modelBuilder.Entity("ShipBu.Data.Shipment", b =>
                {
                    b.HasOne("ShipBu.Data.AppUser", "CreaterUser")
                        .WithMany("Shipments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreaterUser");
                });

            modelBuilder.Entity("ShipBu.Data.State", b =>
                {
                    b.HasOne("ShipBu.Data.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ShipBu.Data.WareHouse", b =>
                {
                    b.HasOne("ShipBu.Data.Country", "Country")
                        .WithMany("WareHouses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ShipBu.Data.State", "State")
                        .WithMany("WareHouses")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ShipBu.Data.AppUser", "CreaterUser")
                        .WithMany("WareHouses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("CreaterUser");

                    b.Navigation("State");
                });

            modelBuilder.Entity("ShipBu.Data.AppUser", b =>
                {
                    b.Navigation("Academies");

                    b.Navigation("BoxProducts");

                    b.Navigation("ContainerGenres");

                    b.Navigation("ContainerProducts");

                    b.Navigation("Countries");

                    b.Navigation("Locationinfos");

                    b.Navigation("Packageprocesses");

                    b.Navigation("PaletteProducts");

                    b.Navigation("Payments");

                    b.Navigation("PriceEdits");

                    b.Navigation("ProductFeatures");

                    b.Navigation("SendingGenres");

                    b.Navigation("Shipments");

                    b.Navigation("WareHouses");
                });

            modelBuilder.Entity("ShipBu.Data.BoxProduct", b =>
                {
                    b.Navigation("Locationinfos");

                    b.Navigation("ProductFeatures");
                });

            modelBuilder.Entity("ShipBu.Data.CalculationVariable", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("ShipBu.Data.ContainerGenre", b =>
                {
                    b.Navigation("ContainerProducts");
                });

            modelBuilder.Entity("ShipBu.Data.ContainerProduct", b =>
                {
                    b.Navigation("Locationinfos");

                    b.Navigation("ProductFeatures");
                });

            modelBuilder.Entity("ShipBu.Data.Country", b =>
                {
                    b.Navigation("Locationinfos");

                    b.Navigation("PriceEdits");

                    b.Navigation("States");

                    b.Navigation("WareHouses");
                });

            modelBuilder.Entity("ShipBu.Data.Locationinfo", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("ShipBu.Data.Packageprocess", b =>
                {
                    b.Navigation("ProductFeatures");
                });

            modelBuilder.Entity("ShipBu.Data.PaletteProduct", b =>
                {
                    b.Navigation("Locationinfos");

                    b.Navigation("ProductFeatures");
                });

            modelBuilder.Entity("ShipBu.Data.PriceEdit", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("ShipBu.Data.ProductFeature", b =>
                {
                    b.Navigation("Locationinfos");
                });

            modelBuilder.Entity("ShipBu.Data.SendingCountry", b =>
                {
                    b.Navigation("Locationinfos");
                });

            modelBuilder.Entity("ShipBu.Data.SendingGenre", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("PriceEdits");
                });

            modelBuilder.Entity("ShipBu.Data.State", b =>
                {
                    b.Navigation("Locationinfos");

                    b.Navigation("PriceEdits");

                    b.Navigation("WareHouses");
                });

            modelBuilder.Entity("ShipBu.Data.WareHouse", b =>
                {
                    b.Navigation("Locationinfos");

                    b.Navigation("PriceEdits");
                });
#pragma warning restore 612, 618
        }
    }
}
